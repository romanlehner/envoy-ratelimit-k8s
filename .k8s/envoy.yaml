apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: envoy-proxy
  name: envoy-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-proxy 
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: envoy-proxy 
    spec:
      containers:
        - name: envoy
          image: envoyproxy/envoy-dev:latest 
          command: ["/usr/local/bin/envoy"]
          args:
            - "--service-node proxy"
            - "--service-cluster proxy"
            - "--config-path /etc/envoy/envoy.yaml"
            - "--concurrency 1"
            - "--mode serve"
            - "--log-level info"
          ports:
            - name: service
              containerPort: 8888
            - name: admin
              containerPort: 8001
          volumeMounts:
          - name: config
            mountPath: /etc/envoy/ 
      volumes:
        - name: config
          configMap:
            name: envoy-proxy-conf
 
---
apiVersion: v1
kind: Service
metadata:
  name: envoy-proxy 
  namespace: default
spec:
  selector:
    app: envoy-proxy 
  ports:
    - name: service
      protocol: TCP
      port: 8888 
      targetPort: 8888
    - name: admin
      protocol: TCP
      port: 8001
      targetPort: 8001
---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/null"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
    static_resources:
      clusters:
        - name: ratelimit
          type: STRICT_DNS
          connect_timeout: 1s
          lb_policy: ROUND_ROBIN
          protocol_selection: USE_CONFIGURED_PROTOCOL
          http2_protocol_options: {}
          load_assignment:
            cluster_name: proxy 
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: ratelimit
                          port_value: 8081
        - name: mock
          connect_timeout: 1s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: mock
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: envoy-mock
                          port_value: 9999
      listeners:
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 8888
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: ingress
                    http_filters:
                      - name: envoy.filters.http.ratelimit
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                          domain: rl
                          request_type: external
                          stage: 0
                          rate_limited_as_resource_exhausted: true
                          failure_mode_deny: false
                          rate_limit_service:
                            grpc_service:
                              envoy_grpc:
                                cluster_name: ratelimit
                            transport_api_version: V3
                      - name: envoy.filters.http.router
                        typed_config: {}
                    route_config:
                      name: route
                      virtual_hosts:
                        - name: backend
                          domains:
                            - "*"
                          routes:
                            - match:
                                prefix: /test
                              route:
                                cluster: mock
                                rate_limits:
                                  - actions:
                                      - source_cluster: {} # This action's value is populated by the "service-cluster" arg passed in when starting Envoy. In this example, it's "proxy" (see docker-compose-example.yml)
                                      - destination_cluster: {} # This action's value is populated by the value set in the above egress "cluster" field -- "mock"
                            - match:
                                prefix: /header
                              route:
                                cluster: mock
                                rate_limits:
                                  - actions:
                                      - request_headers:
                                          header_name: "foo"
                                          descriptor_key: "foo"
                            - match:
                                prefix: /twoheader
                              route:
                                cluster: mock
                                rate_limits:
                                  - actions:
                                      - request_headers:
                                          header_name: "foo"
                                          descriptor_key: "foo"
                                      - request_headers:
                                          header_name: "bar"
                                          descriptor_key: "bar"
                                  - actions:
                                      - request_headers:
                                          header_name: "foo"
                                          descriptor_key: "foo"
                                      - request_headers:
                                          header_name: "baz"
                                          descriptor_key: "baz"
    
kind: ConfigMap
metadata:
  name: envoy-proxy-conf
  namespace: default

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: envoy-mock
  name: envoy-mock
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-mock
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: envoy-mock
    spec:
      containers:
        - name: envoy
          image: envoyproxy/envoy-dev:latest 
          command: ["/usr/local/bin/envoy"]
          args:
            - "--service-node mock"
            - "--service-cluster mock"
            - "--config-path /etc/envoy/envoy.yaml"
            - "--concurrency 1"
            - "--mode serve"
            - "--log-level info"
          ports:
            - name: service
              containerPort: 9999
          volumeMounts:
          - name: config
            mountPath: /etc/envoy/ 
      volumes:
        - name: config
          configMap:
            name: envoy-mock-conf
    
---
apiVersion: v1
kind: Service
metadata:
  name: envoy-mock 
  namespace: default
spec:
  selector:
    app: envoy-mock 
  ports:
    - name: service
      protocol: TCP
      port: 9999
      targetPort: 9999
---
apiVersion: v1
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 9999
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: ingress
                    route_config:
                      name: ingress
                      virtual_hosts:
                        - name: backend
                          domains:
                            - "*"
                          routes:
                            - match:
                                prefix: "/"
                              direct_response:
                                status: "200"
                                body:
                                  inline_string: "Hello World"
                    http_filters:
                      - name: envoy.filters.http.router
                        typed_config: {}
    admin:
      access_log_path: "/dev/null"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
kind: ConfigMap
metadata:
  name: envoy-mock-conf
  namespace: default
